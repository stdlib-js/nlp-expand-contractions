{"version":3,"file":"index.mjs","sources":["../lib/expand_contractions.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectKeys from '@stdlib/utils-keys' ;\nimport isCapitalized from '@stdlib/assert-is-capitalized' ;\nimport uncapitalize from '@stdlib/string-uncapitalize' ;\nimport capitalize from '@stdlib/string-capitalize' ;\nimport tokenize from '@stdlib/nlp-tokenize' ;\nimport { isPrimitive as isString } from '@stdlib/assert-is-string' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport CONTRACTIONS from './contractions.json' ;\n\n\n// VARIABLES //\n\nvar KEYS = objectKeys( CONTRACTIONS );\n\n\n// MAIN //\n\n/**\n* Expands all contractions to their formal equivalents.\n*\n* @param {string} str - string to convert\n* @throws {TypeError} must provide a string\n* @returns {string} string with expanded contractions\n*\n* @example\n* var str = 'I won\\'t be able to get y\\'all out of this one.';\n* var out = expandContractions( str );\n* // returns 'I will not be able to get you all out of this one.'\n*\n* @example\n* var str = 'It oughtn\\'t to be my fault, because, you know, I didn\\'t know';\n* var out = expandContractions( str );\n* // returns 'It ought not to be my fault, because, you know, I did not know'\n*/\nfunction expandContractions( str ) {\n\tvar tokens;\n\tvar token;\n\tvar out;\n\tvar key;\n\tvar i;\n\tvar j;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( '0N93N', str ) );\n\t}\n\tout = '';\n\ttokens = tokenize( str, true );\n\tfor ( i = 0; i < tokens.length; i++ ) {\n\t\ttoken = tokens[ i ];\n\t\tif ( isCapitalized( token ) ) {\n\t\t\tfor ( j = 0; j < KEYS.length; j++ ) {\n\t\t\t\tkey = KEYS[ j ];\n\t\t\t\tif ( uncapitalize( token ) === key ) {\n\t\t\t\t\ttoken = capitalize( CONTRACTIONS[ key ] );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( j = 0; j < KEYS.length; j++ ) {\n\t\t\t\tkey = KEYS[ j ];\n\t\t\t\tif ( token === key ) {\n\t\t\t\t\ttoken = CONTRACTIONS[ key ];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tout += token;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default expandContractions;\n"],"names":["KEYS","objectKeys","CONTRACTIONS","expandContractions","str","tokens","token","out","key","i","j","isString","TypeError","format","tokenize","length","isCapitalized","uncapitalize","capitalize"],"mappings":";;moHAkCIA,EAAOC,EAAYC,GAsBvB,SAASC,EAAoBC,GAC5B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,IAAMC,EAAUP,GACf,MAAM,IAAIQ,UAAWC,EAAQ,QAAST,IAIvC,IAFAG,EAAM,GACNF,EAASS,EAAUV,GAAK,GAClBK,EAAI,EAAGA,EAAIJ,EAAOU,OAAQN,IAAM,CAErC,GADAH,EAAQD,EAAQI,GACXO,EAAeV,IACnB,IAAMI,EAAI,EAAGA,EAAIV,EAAKe,OAAQL,IAE7B,GADAF,EAAMR,EAAMU,GACPO,EAAcX,KAAYE,EAAM,CACpCF,EAAQY,EAAYhB,EAAcM,IAClC,YAIF,IAAME,EAAI,EAAGA,EAAIV,EAAKe,OAAQL,IAE7B,GAAKJ,KADLE,EAAMR,EAAMU,IACS,CACpBJ,EAAQJ,EAAcM,GACtB,MAIHD,GAAOD,EAER,OAAOC"}